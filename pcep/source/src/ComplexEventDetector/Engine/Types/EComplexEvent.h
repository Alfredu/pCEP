/*
 * Copyright (C) 2019  Atos Spain SA. All rights reserved.
 *
 * This file is part of pCEP.
 *
 * pCEP is free software: you can redistribute it and/or modify it under the
 * terms of the Apache License, Version 2.0 (the License);
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * The software is provided "AS IS", without any warranty of any kind, express or implied,
 * including but not limited to the warranties of merchantability, fitness for a particular
 * purpose and noninfringement, in no event shall the authors or copyright holders be
 * liable for any claim, damages or other liability, whether in action of contract, tort or
 * otherwise, arising from, out of or in connection with the software or the use or other
 * dealings in the software.
 *
 * See README file for the full disclaimer information and LICENSE file for full license
 * information in the project root.
 *
 * Authors:  Atos Research and Innovation, Atos SPAIN SA
 */


/*!
	Types for the Execution Framework
	
*/
#ifndef _SOL_CEP_ENGINE_TYPES_COMPLEX_EVENT_H_
#define _SOL_CEP_ENGINE_TYPES_COMPLEX_EVENT_H_

///#include <time.h>
#include "EProgram.h"
#include "../../../Types/TValue.h"

struct EPayloadAttribute;
struct EDetectionTree;
struct EComplexEventFunction;
struct ECapturedEventPool;
struct EEventAttribute;
struct EEvent;
struct EExternal;


struct EComplexEvent
{
	EComplexEvent() : oid(-1L)
					, name(0) 
					, payloadAttributes(0)
					, whereClause(0)
					, detectionTree(0)
					, complexEventFunctions(0)
					, groupAttributeOid(-1L)
					, windowType(noWindow)
					, duration(0)
					, tupleCount(0)
					, tupleEvent(0)
					, capturedEventPool(0)
					, durationExt(0)
					, tupleCountExt(0)
					, recurringTimeExt(0)
					, prev(0)
                                        , rejectedInStack(0)  ///RP: 16022015
                                        , rejectedToStack(0)
                                        , tape(0)
	{}

	enum TWindowType
	{
		fixed,
		sliding,
		tuple,
		noWindow
	};
	
	//!@{
	//! Build time attributes
	long oid;	//! Internal id generated by Framework builder.
	char* name;	//! External name
	EPayloadAttribute* payloadAttributes;	
	EProgram* whereClause;
	EDetectionTree* detectionTree;
	EComplexEventFunction* complexEventFunctions;
	
	long groupAttributeOid; //! OID of event attribute used for grouping
	
	TWindowType windowType;
	TTimeLiteral recurringTime; //! usage depends on windowType
	time_t duration;	//! usage depends on windowType
	int tupleCount;		//! usage depends on windowType
	
	EEvent* tupleEvent; //! Event for which we count the Tuples. 
	//!@}
	
	
	//!@{
	//! Runtime attributes
	/*
		Placeholder for live results of the complex
		event function evaluations 
		FIXME: to be implemented. 
	*/
	//EComplexEventFunction* complexEventResults;

	//! Captured events
	ECapturedEventPool* capturedEventPool;
	
	// runtime - external vars.
	//  if != null, must resolve their counterpart (w/o the "Ext" suffix)
	//   e.g. durationExt -> duration
	EExternal* durationExt;
	EExternal* tupleCountExt;
	EExternal* recurringTimeExt;
	//!@}
	
	//LL
	EComplexEvent* prev;
        
 ///RP: used to tuple win
        int rejectedInStack;  ///RP: 16022015
        int rejectedToStack;
        unsigned long long tape;
        
};
#endif
